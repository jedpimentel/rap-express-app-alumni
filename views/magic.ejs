<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://yoannmoinet.github.io/nipplejs/javascripts/nipplejs.js"></script>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <!-- what would be a good code styling practice for aframe? -->
    <style type="text/css">
        a-scene {
            height: 300px;
            width: 600px;
        }
    </style>
    <a-scene embedded vr-mode-ui="enabled: false">

        <!-- analog movement stuff -->
        <script type="text/javascript">
            AFRAME.registerComponent('follow-camera', {
                // attaches thing to camera position, but not rotation
                // wasd controls was making this move glitchily, but became smothe if tabbing out and in again
                schema: {
                    camID: {type: 'string'}
                },
                init: function() {

                    this.camera = document.querySelector(`#${this.data.camID}`)
                    if (!this.camera) throw `error, could not find "#${this.data.camID}"`

                },
                tick: function() {
                    this.el.object3D.position.copy(this.camera.object3D.position)
                    this.el.object3D.rotation.y = this.camera.object3D.rotation.y
                }
            });

            // zoidberg zardbarg
            AFRAME.registerSystem('analog-input-handler-test', {
                // STATE: keep internal to touch-controls.html, 
                // resolve forward/flatForward naming convention, keep both modes under a flag?
                // is it okay to move the camera itself instead of wrapper? (prob not)
                // how about rotating the wrapper versus the camera itself?
                schema: {},
                foo: () => console.log('bar'),
                init: function () {
                    this._active = false;
                    this._direction = new THREE.Vector2(0, 0);
                    document.addEventListener('DOMContentLoaded', (event) => {
                        this.camwrapper = document.querySelector('#camera-wrapper');
                        this.camera = document.querySelector('#camera-actual');

                        // ADD UI TO THE DOM
                        const span = document.createElement('span');
                        // no need to make a div in a div
                        span.innerHTML = `
                            <div id="overlay">
                                <p>use this touch-pad to move around</p>
                            </div>
                        `;
                        document.querySelector('#analog').appendChild(span);

                        const style = document.createElement('style');
                        style.innerHTML = `
                            #overlay {
                                // position:absolute;

                                display: inline-block;
                                bottom:0px;
                                left:0px;
                                z-index:1000;
                                background-color: gray;

                                height: 200px;
                                width: 200px;
                                margin: 50px
                            }
                        `;
                        document.head.appendChild(style);

                        // avoid accessing properties before initialized,
                        // might be goood to have system methhoods/props check
                        // if system has been fully initialized/loaded, defined
                        // as having camwrapper and all dependencies already be initialized
                        this.cWrapPos = this.camwrapper.object3D.position;


                        // https://nunustudio.org/learn/basics/14_joystick/page.html
                        inputHandler = document.querySelector('a-scene').systems['analog-input-handler-test'];
                        
                        // direction = new THREE.Vector2(0, 0);

                        const manager = nipplejs.create({
                            zone: document.getElementById('overlay'),
                            color: 'blue'
                        });

                        // setInterval(function(){
                        //     if(this._active) {
                        //         inputHandler.move(this._direction.y, this._direction.x)
                        //     }
                        // }, 1000 / 90);

                        manager.on("added", (event, nipple) => {
                            nipple.on("start", (event, data) => {
                                this._active = true;
                            });
                            nipple.on("move", (event, data) => {
                                const force = 0.08 * data.force;
                                this._direction.x = Math.cos(data.angle.radian) * force;
                                this._direction.y = Math.sin(data.angle.radian) * force;
                            });
                            nipple.on("end", (event, data) => {
                                speed = 0
                                this._active = false;
                            });
                        });
                        manager.on("removed", (event, nipple) => {
                            nipple.off("move start end");
                        });
                    });

                    // this.heading = new THREE.Vector3()
                },

                move: function (forward, rightward) {
                    const yRot = this.camera.object3D.rotation.y;
                    this.cWrapPos.z += rightward *  Math.sin(-yRot) - forward * Math.cos(yRot);
                    this.cWrapPos.x += rightward *  Math.cos(-yRot) - forward * Math.sin(yRot);

                },

                // // TODO: Remove "forward" and "rightward" stuff, document "alt version" in a vlog post
                // forward: function (value) {
                //     //!! maybe not stable, see: Quaternions
                //     // https://threejs.org/docs/#api/en/math/Quaternion
                //     const yRot = this.camera.object3D.rotation.y 
                //     this.cWrapPos.z -= (value * Math.cos(yRot));
                //     this.cWrapPos.x -= (value * Math.sin(yRot));
                    
                //     // {// alt version, move slower if looking down
                //     //     this.camera.object3D.getWorldDirection(this.heading);
                //     //     this.camwrapper.object3D.position.x -= this.heading.x * value
                //     //     this.camwrapper.object3D.position.z -= this.heading.z * value
                //     // }
                // },
                // rightward: function (value) {
                //     const yRot = this.camera.object3D.rotation.y 
                //     this.cWrapPos.z += (value * Math.sin(-yRot));
                //     this.cWrapPos.x += (value * Math.cos(-yRot));
                // },
                tick: function () {                    
                    if(this._active) {
                        this.move(this._direction.y, this._direction.x)
                    }
                },
            })
        </script>

        <script type="text/javascript">
            
            // AFRAME.registerComponent('magic-laser', {
            //   dependencies: ['raycaster'],
            //     init: function () {
            //         this.el.addEventListener('raycaster-intersection', function () {
            //             console.log('Player hit something!');
            //         });
            //     }
            // });

            AFRAME.registerComponent('magic-target', {
                // is the dependencies needed here or not?
                dependencies: ['raycaster'],
                init: function () {
                    this.el.addEventListener('raycaster-intersection', function () {
                        console.log('AAARHHRHG!');
                    });
                },
                clicked: function () {
                    ;
                    // increase counter value
                }
                // delete: function () {
                //     ;
                //     // TODO: tell database to also delete its version of this? maybe have the laser handle that part
                // }
            });


        // EXPERIMENTAL (UX warning, could use refactoring/optimization) 
        // first click starts movement, second click stops movement
        AFRAME.registerComponent('click-to-reposition', {
            init: function() {
                this.active = false;
                this.pos = this.el.object3D.position;
                this.pos_start = new THREE.Vector3();

                this.clicker_start = new THREE.Vector3();
                this.clicker_pos = new THREE.Vector3();
                this.clickerEl = undefined;

                this.el.addEventListener('click', (e) => {
                  this.active = !this.active;
                  if(this.active) {
                    this.clickerEl = e.detail.cursorEl;
                    this.clickerEl.object3D.getWorldPosition(this.clicker_start)
                    this.pos_start.copy(this.el.object3D.position)
                  }
                  else {
                    this.drop();
                  }
                })
            },
            tick: function() {
                if(this.active) {
                    this.drag();
                }
            },
            grab: function(e) {
                this.active = !this.active;
                if(this.active) {
                    this.clickerEl = e.detail.cursorEl;
                    this.clickerEl.object3D.getWorldPosition(this.clicker_start)
                    this.pos_start.copy(this.el.object3D.position)
                }
            },
            drag: function() {
                this.clickerEl.object3D.getWorldPosition(this.clicker_pos)
                this.pos.copy(this.pos_start).add(this.clicker_pos).sub(this.clicker_start)
            },
            drop: function(e) {
                console.log("dropped!")
                this.savePosition();
            },
            savePosition: function(e) {
                // TODO: check/sanitize dependancy chain
                // should be okay to justg limit user from entering scene, or limiting functionalities until everything is loaded
                this.updateMagic(this.el);//✨
            },
            updateMagic(e) {
                // placeholder method, currently 
                updateMagic(e);
                // moved this out of main.js 
                // TODO: move all this stuff into its own .js file
                // Sorry for this mess, had trouble sleeping
                async function updateMagic(entity){

                    const position = `${entity.object3D.position.x} ${entity.object3D.position.y} ${entity.object3D.position.z}`
                    const rotation = `${entity.object3D.rotation.x} ${entity.object3D.rotation.y} ${entity.object3D.rotation.z}`


                    // const
                    // console.log('yes', entity)
                    // console.log(this)
                    // console.log(entity.object3D.quaternion);
                    const quaternion = entity.object3D.quaternion;
                    console.log('updating id', entity.id)
                    try{
                        const response = await fetch('updateMagic', {
                            method: 'put',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({
                              'id': entity.id,
                              // 'object3D': entity.object3D,
                              'position': position,
                              'rotation': rotation,
                              // 'wxyz': [
                              //   quaternion.w, 
                              //   quaternion.x, 
                              //   quaternion.y, 
                              //   quaternion.z
                              // ]
                            })
                          })
                        const data = await response.json()
                        console.log(data)
                        location.reload()

                    }catch(err){
                        console.error(err)
                    }
                }
            },
        });

        </script>

        <!-- wasd user -->
        <a-entity id="camera-wrapper">
            <a-camera id="camera-actual" look-controls="pointerLockEnabled: true" near="0.001" wasd-controls>
                <a-cylinder id="laser-pointer" position="0.2 -0.4 -0.9" radius="0.01" height= "1.0" rotation="90 0 0" color="beige" opacity="1.0"></a-cylinder>
                <a-entity id="laser-ray" position="0.2 -0.4 -1.4" cursor="rayOrigin: entity; showLine: true;" raycaster="objects: .clickable; showLine: true; far: 16" line="color: white; opacity:0.5"></a-entity>
            </a-camera>
        </a-entity>

        <!-- clickable target -->
        <a-box  class="clickable" magic-target click-to-reposition position="-1 0.5 -3" rotation="0 45 0" color="#5aa27c"></a-box>

        <!-- not sure if it'll work to contain this in an entity  -->
        <!-- everything is a box for now -->
        <!-- quaternions should be more efficient than position+rotation -->
        <!-- but I'm not sure if express handles it well -->
        <!-- saving positions and rotations as strings is inneficient -->
        <!-- better to work on quaternions than a robust pos/rot implementation? -->
        <!-- why are these boxes showing up as having the raycaster component? Do targets also get it? -->
        <% for(let i=0; i < magic.length; i++) {%>
            <a-box class="clickable" magic-target click-to-reposition 
                id="<%= magic[i]._id %>" 
                position="<%= magic[i].position %>" 
                rotation="<%= magic[i].rotation %>"    
            ></a-box>
        <% } %>

        <!-- default boilerplate -->
        <a-entity position="0 0 -10">
            <a-box position="-1 0.5 -3" rotation="0 45 0" color="#4CC3D9"></a-box>
            <a-sphere position="0 1.25 -5" radius="1.25" color="#EF2D5E"></a-sphere>
            <a-cylinder position="1 0.75 -3" radius="0.5" height="1.5" color="#FFC65D"></a-cylinder>
            <a-plane position="0 0 -4" rotation="-90 0 0" width="4" height="4" color="#7BC8A4"></a-plane>
            <a-sky color="#ECECEC"></a-sky>
        </a-entity>



        <!-- CRUD GUN -->
        <a-entity position="0 1.5 -5" rotation="0 45 0">
            <a-text position="-0.019 0 -0.05" rotation="0 -90 0" scale="0.09 0.1 0.1" value="CRUD GUN" ></a-text>
            <a-box width="0.038" height="0.038" depth="0.100" color="#FF6700"></a-box>
            <a-box width="0.031" height="0.031" depth="0.038" color="#FF6700" position="0 -0.0345 0.031"></a-box>
            <a-box position="0 0.024 -0.045" width="0.01" height="0.01" depth="0.01" color="#FF3300"></a-box>
            <a-box position="0.0075 0.024 0.045" width="0.01" height="0.01" depth="0.01" color="#AA3333"></a-box>
            <a-box position="-0.0075 0.024 0.045" width="0.01" height="0.01" depth="0.01" color="#AA3333"></a-box>
        </a-entity>

        <!-- <a-entity id="player" collider-check>
          <a-entity raycaster="objects: .collidable" position="0 -0.9 0" rotation="90 0 0"></a-entity>
        </a-entity>
        <a-entity class="collidable" geometry="primitive: box" position="1 0 0"></a-entity> -->
    </a-scene>

    <span id="analog"></span>
    <button id="clicker"><h2>This is a CLICK BUTTON</h2></button>
    <style type="text/css">
        .clicker {
            display: inline-block;
            width: 200px,
            height: 200px;
            background-color: green;
            border: 1px solid black;
        }
    </style>
    <script type="text/javascript">
        const raycaster = document.querySelector("#laser-ray")
        document.querySelector("#clicker").onclick = function() {
            console.log('yo', raycaster)
            raycaster.click();
        }
    </script>

    <!-- TODO: do the API stuff outside forms  -->
    <h2>Create Entry:</h2>
    <form action="/initMagicValue" method="POST">
        <!-- show values here -->
        <input type="submit" name="" value="New Entry">
    </form>

    <h1>Current Entries</h1>
    <ol>
        <% for(let i=0; i < magic.length; i++) {%>
            <li>
                <span><%= JSON.stringify(magic[i]) %></span>
            </li>
        <% } %>
    </ol>

    <h2>Update Entry ("x" position)</h2>
    <form action="/updateMagic" method="POST">
        <input type="text" placeholder="_id" name="_id">
        <!-- todo: disable rest of form until _id is filled out  -->
        <input type="text" placeholder="x" name="_id">
        <input type="submit" name="">
    </form>


    <h2>Delete Entry</h2>
    <!-- disable form suggestions -->
    <!-- <form action="/deleteMagic/:id" method="DELETE"> -->
    <section>
        <input id="magic-delete-target" type="text" placeholder="_id" name="wut">
        <button onclick="deleteMagic()">Delete</button>
        <!-- <script type="text/javascript">
            const target = document.querySelector("#magic-delete-target");
            document.querySelector("#magic-delete-button").onclick = event => {
                console.log('woo', target.value)
            };
        </script> -->
    </section>
    
    <script src='js/main.js'></script>
</body>
</html>
